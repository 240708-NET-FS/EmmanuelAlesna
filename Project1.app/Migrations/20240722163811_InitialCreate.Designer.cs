// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.app.Repository;

#nullable disable

namespace Project1.app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722163811_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<double>("AAPL")
                        .HasColumnType("float");

                    b.Property<double>("AMZN")
                        .HasColumnType("float");

                    b.Property<double>("GOOG")
                        .HasColumnType("float");

                    b.Property<double>("MSFT")
                        .HasColumnType("float");

                    b.Property<double>("NVDA")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = -1,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test1"
                        },
                        new
                        {
                            AccountID = -2,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test2"
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PasswordID");

                    b.ToTable("Passwords");

                    b.HasData(
                        new
                        {
                            PasswordID = -1,
                            Hash = "DCB5FBF28CE2CE2F23E802CF41637698F74F3B15E1A065051138770FE3F6CA72B58A4993C524D73646B3EDF7C912F7B5D386367405BA063DF57B2F576ACD720B",
                            Salt = new byte[] { 209, 152, 237, 24, 58, 178, 81, 102, 66, 186, 188, 23, 114, 38, 87, 198, 25, 22, 232, 204, 79, 82, 213, 224, 127, 190, 93, 197, 50, 74, 41, 34, 169, 141, 162, 110, 71, 114, 61, 193, 15, 69, 217, 142, 136, 229, 143, 95, 51, 253, 255, 89, 106, 106, 43, 178, 112, 109, 183, 12, 128, 144, 195, 249 }
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.HasOne("Project1.app.Repository.Entities.Account", "Account")
                        .WithOne("Password")
                        .HasForeignKey("Project1.app.Repository.Entities.Password", "PasswordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
