// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.app.Repository;

#nullable disable

namespace Project1.app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722163820_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<double>("AAPL")
                        .HasColumnType("float");

                    b.Property<double>("AMZN")
                        .HasColumnType("float");

                    b.Property<double>("GOOG")
                        .HasColumnType("float");

                    b.Property<double>("MSFT")
                        .HasColumnType("float");

                    b.Property<double>("NVDA")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = -1,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test1"
                        },
                        new
                        {
                            AccountID = -2,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test2"
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PasswordID");

                    b.ToTable("Passwords");

                    b.HasData(
                        new
                        {
                            PasswordID = -1,
                            Hash = "0CA637A1EC5BCC84A58FA334202DD0EE9540CDCDF171E7B9CDCE4F6F2DB4D01DC403B632894C186516BEB8DB1992B49954FE58A6ACA20C788FCCE0D3E706C7F6",
                            Salt = new byte[] { 59, 49, 192, 206, 162, 145, 166, 92, 108, 25, 216, 255, 7, 24, 243, 113, 124, 85, 196, 152, 67, 71, 62, 154, 47, 18, 206, 174, 187, 17, 197, 168, 245, 59, 165, 26, 253, 149, 224, 8, 226, 29, 136, 203, 22, 105, 176, 123, 211, 215, 196, 193, 115, 155, 80, 188, 17, 46, 58, 33, 82, 77, 41, 41 }
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.HasOne("Project1.app.Repository.Entities.Account", "Account")
                        .WithOne("Password")
                        .HasForeignKey("Project1.app.Repository.Entities.Password", "PasswordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
