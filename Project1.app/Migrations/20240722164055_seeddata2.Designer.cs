// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.app.Repository;

#nullable disable

namespace Project1.app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722164055_seeddata2")]
    partial class seeddata2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<double>("AAPL")
                        .HasColumnType("float");

                    b.Property<double>("AMZN")
                        .HasColumnType("float");

                    b.Property<double>("GOOG")
                        .HasColumnType("float");

                    b.Property<double>("MSFT")
                        .HasColumnType("float");

                    b.Property<double>("NVDA")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = -1,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test1"
                        },
                        new
                        {
                            AccountID = -2,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test2"
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PasswordID");

                    b.ToTable("Passwords");

                    b.HasData(
                        new
                        {
                            PasswordID = -1,
                            Hash = "D774572E64B789873592A8E96315D0B40CCC5AB9E2BA2D5FB8558611E69FC32202837373365243FD6CACEA738099BED5573552B32F89216EACB032C145A25C19",
                            Salt = new byte[] { 208, 77, 222, 183, 30, 233, 129, 17, 101, 25, 172, 72, 145, 113, 151, 32, 201, 208, 184, 137, 198, 21, 34, 113, 197, 237, 177, 101, 8, 35, 51, 177, 157, 200, 120, 124, 65, 93, 18, 219, 200, 132, 33, 78, 128, 245, 205, 212, 125, 177, 127, 76, 24, 34, 207, 182, 8, 66, 102, 92, 24, 245, 179, 15 }
                        },
                        new
                        {
                            PasswordID = -2,
                            Hash = "F395A11C4251F2D3DCA45006B561A40F0EB267F387D8599F204A7A06026FE779A6876636136C7B15D6FEC5303BAD776BE139E2317B07B2F3DAFED54FA9C13710",
                            Salt = new byte[] { 72, 255, 141, 143, 195, 184, 64, 121, 219, 96, 241, 24, 147, 149, 75, 122, 49, 40, 172, 48, 45, 27, 233, 31, 93, 196, 89, 154, 238, 11, 119, 95, 37, 251, 134, 165, 210, 96, 130, 29, 212, 214, 251, 15, 170, 225, 254, 137, 95, 151, 201, 96, 23, 225, 190, 51, 220, 148, 252, 202, 90, 117, 250, 147 }
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.HasOne("Project1.app.Repository.Entities.Account", "Account")
                        .WithOne("Password")
                        .HasForeignKey("Project1.app.Repository.Entities.Password", "PasswordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
