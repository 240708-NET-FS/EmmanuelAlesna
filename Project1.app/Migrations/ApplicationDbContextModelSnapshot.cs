// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project1.app.Repository;

#nullable disable

namespace Project1.app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<double>("AAPL")
                        .HasColumnType("float");

                    b.Property<double>("AMZN")
                        .HasColumnType("float");

                    b.Property<double>("GOOG")
                        .HasColumnType("float");

                    b.Property<double>("MSFT")
                        .HasColumnType("float");

                    b.Property<double>("NVDA")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = -1,
                            AAPL = 10000.0,
                            AMZN = 3.0,
                            GOOG = 342432.0,
                            MSFT = 29909.0,
                            NVDA = 12312312.0,
                            Username = "test1"
                        },
                        new
                        {
                            AccountID = -2,
                            AAPL = 0.0,
                            AMZN = 0.0,
                            GOOG = 0.0,
                            MSFT = 0.0,
                            NVDA = 0.0,
                            Username = "test2"
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PasswordID");

                    b.ToTable("Passwords");

                    b.HasData(
                        new
                        {
                            PasswordID = -1,
                            Hash = "0AA5B38A63972FFD78D3DDC62649DF1EAF6C85572EB5DFB3DC2CFC1C482D0B3F453E501462A723B08B0591EC179C88D622C6FEB59EA70364D82157999965DC6F",
                            Salt = new byte[] { 165, 60, 64, 158, 37, 181, 36, 249, 24, 78, 178, 186, 100, 7, 229, 104, 100, 213, 27, 247, 79, 210, 107, 20, 23, 156, 52, 208, 196, 25, 22, 36, 107, 251, 222, 206, 130, 7, 233, 61, 38, 243, 172, 40, 233, 75, 190, 135, 85, 171, 35, 44, 242, 27, 202, 240, 12, 132, 111, 218, 3, 97, 199, 159 }
                        },
                        new
                        {
                            PasswordID = -2,
                            Hash = "6370ACC2B878A2013D4EA35A6FEDADA1205BF7E45412A9E442F1957F0FCA4E3945036095DF05842C29956F24304665CA6C0D68FD904D212CF2DD0D8B9F7B2E0D",
                            Salt = new byte[] { 26, 137, 202, 158, 225, 46, 129, 45, 214, 212, 4, 192, 162, 217, 132, 215, 188, 3, 110, 79, 198, 234, 10, 70, 220, 109, 151, 146, 180, 199, 252, 133, 116, 185, 165, 203, 84, 95, 152, 164, 94, 135, 64, 142, 116, 214, 244, 84, 60, 113, 165, 241, 234, 188, 64, 26, 149, 137, 70, 153, 114, 185, 54, 38 }
                        });
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Password", b =>
                {
                    b.HasOne("Project1.app.Repository.Entities.Account", "Account")
                        .WithOne("Password")
                        .HasForeignKey("Project1.app.Repository.Entities.Password", "PasswordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Project1.app.Repository.Entities.Account", b =>
                {
                    b.Navigation("Password");
                });
#pragma warning restore 612, 618
        }
    }
}
